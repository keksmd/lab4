@startuml

class Checked extends Exception{
    Cheked()
    Cheked(String)

}
class RunTimeException extends Exception{}
class Unchecked extends RunTimeException{
    Uncheked()
    Uncheked(String)

}
class FileException extends Checked{
    FileException()
    FileException(String)
    getMesssage()
}
class ResurrectLocationException extends Checked{
    ResurrectLocationException()
    ResurrectLocationException(String)
    getMesssage()
}
class ResurrectTimeException extends Checked{
    ResurrectTimeException()
    ResurrectTimeException(String)
    getMesssage()
}


enum Sounds{
    SKRIP,
    SHELK,
    SHURSH
}
enum Sex{
    FEMALE,
    MALE
}
enum Speed{
    FAST,
    NORMAL,
    SLOW
    Speed()
    int value
    int getValue
}
enum Thoughts{
   LUIS1(" Не очень похоже на Кладбище домашних животных "),
   LUIS2(" Луис, что ты здесь делаешь? Ты забыл — ты не должен ходить этой дорогой!"),
   LUIS3("Уединенное место, но, однако, никто не пойдет сюда целоваться") 
   Thoughts() {}
   String though 
   String getThough(){}
}
enum ItemSeize {
    BIG(5),
    MEDIUM(3),
    SMALL(1) 
    ItemSeize(int)
    int seize 
    public int getSeize()
}
enum Time {
    MORNING("Утро"),
    DAY("День"),
    EVENING("Вечер"),
    NIGHT("Ночь") 
     private String value 
    Time(String v)
    public String getValue()
}







interface Movements{
    go()
    run()
    go_to(Loc)
}
interface ItemActions {
    public void take(Item) 
    public void put(Item) 
}
interface BrainActivity {
    public void say(String)
    public void think(Thoughts) 
    public void remember(Person,Thoughts) 
}








abstract class Person extends Ownable{
    int hp
    void setHp(int)
    int getHp()
    int heartbeats
    void setHeartbeats(int)
    int getHeartbeats()
    Sex sex
    void setSex(Sex)
    Sex getSex()
    Loc loc
    void setLoc(Loc)
    Loc getLoc()

    Speed speed
    Speed getSpeed()
    void setSpeed(Speed)

    void setHeartbeats(int)
    Person(String,Sex,int,int)
    Person(String,Sex,int,int,Loc)
    @Override(equals())
}
abstract class AlivePerson extends Person implements Movements,BrainActivity,ItemActions{
    int stamina
    AlivePerson(String,Sex)
    AlivePerson(String,Sex,int)
    void resurrect(DeadPerson)
    void kill(AlivePerson)
    void setStamina(int)
    int getStamina()


    void go()
    void run()
    void goTo(Loc)

    void think(Thoughts)
    void remember(Person,Thoughts)
    void Say(String)

    void put(Item)
    void take(Item)

    eat(Food)
}
class Corpse extends DeadPerson{
    Corpse(String,Sex)
    Corpse(String,Sex,Loc)
}
abstract class DeadPerson extends Person{
    DeadPerson(String,Sex)
    DeadPerson(String,Sex,Loc)
}
class Luis extends AlivePerson{
    Luis(String,Sex)
}
class UndeadPerson extends AlivePerson{
    UndeadPerson(String,Sex)
}
class Jude extends AlivePerson{
    Jude(String,Sex)
}
class GajeD extends DeadPerson{
    GajeD(String,Sex)
    GajeD(String,Sex,Loc)
}









abstract class Loc extends Ownable{
Loc(String)
boolean usl
boolean getUsl()
enter(AlivePerson))
}
class Alley extends LocThrough{
Alley()
@Override(getUsl())
@Override(enter())
}
class GraveTrail extends LocThrough{
    GraveTrail()
    @Override(getUsl())
    @Override(enter())
}
class Grave extends Loc{
    @Override(getUsl())
    @Override(enter())
    Grave()
}

class Gates extends Loc{
    static boolean locked
    static boolean getLocked()
    static void open()
    static void close()
    Gates(String)
}
Grave <-- Gates
class Tombs extends Loc{
    Tombs()
}
class LocThrough extends Loc{
    @Override(enter())
    LocThrough(String)
}
class Out extends Loc{
    Out()
}





class Item{
    String name
    String getName() 
    setName(String)
    ItemSeize seize 
    Itemseize getSeize() 
    setSeize(ItemSeize)
    Ownable owner 
    Ownable getOwner() 
    setOwner(Ownable)
    boolean isFood()
}
class Food extends Item{
    Food(int,ItemSeize,String)
    int calories
    int getCalories()
}


class Delay{
    static void DelayP(AlivePerson)
    static void Delay
}
class Randomizer{
    static boolean chance(double)
}
abstract class Ownable{
    String name
    String getName()
    void setName(String)
    boolean isEqual(Ownable)
}

interface Declaring {
            String declare();
        }
StoryTell <-- Declaring
static class StoryTell{
    Map<String, AlivePerson> aliveActorList
    Map<String, DeadPerson> deadActorList
    Map<String, UndeadPerson> undeadActorList
    Map<String, Loc> locList
    Time time
    setTime(Time)

    Time getTime()
    setStory()
    storyGo()
    startTime()
    createActorsNLoc()

    declareActors(Map<String, AlivePerson> map){anonym class -}
    declareDeadActors(Map<String, DeadPerson> map){local class Declation extends Declaring}

}


Main<--StoryTell
class Main {
    main(String[] args)
}

@enduml